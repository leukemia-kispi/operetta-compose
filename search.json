[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "The operetta-compose package collects Fractal1 tasks to convert and process images from Perkin-Elmer Opera/Operetta high-content microscopes. It includes workflows for drug response profiling built upon the OME-ZARR file standard.\n\nAvailable Fractal Tasks\nCurrently the following tasks are part of operetta-compose\n\n\n\n\n\n\n\nTask\nDescription\n\n\n\n\nharmony_to_ome_zarr\nConvert TIFFs which were exported from Harmony (Operetta/Opera, Perkin-Elmer) to OME-ZARR\n\n\nstardist_segmentation\nSegment cells with Stardist\n\n\nregionprops_measurement\nTake measurements using regionprops and write the features to the OME-ZARR\n\n\nlabel_prediction\nMake predictions on the selected wells and write them to the OME-ZARR\n\n\ncondition_registration\nRegister the experimental conditions in the OME-ZARR\n\n\n\nÂ \n\n1 Fractal is developed by the UZH BioVisionCenter under the lead of @jluethi under contract with eXact lab S.r.l.."
  },
  {
    "objectID": "api/io.features_to_ome_zarr.html",
    "href": "api/io.features_to_ome_zarr.html",
    "title": "io.features_to_ome_zarr",
    "section": "",
    "text": "io.features_to_ome_zarr(zarr_url, feature_table, table_name='regionprops', label_name='nuclei')\nSave features to the OME-ZARR fileset\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfeature_table\npd.DataFrame\nDataframe with feature measurements generated by feature_table\nrequired\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired\n\n\ntable_name\nstr\nFolder name of the measured regionprobs features\n'regionprops'\n\n\nlabel_name\nstr\nName of the labels to use for feature measurements\n'nuclei'"
  },
  {
    "objectID": "api/io.features_to_ome_zarr.html#parameters",
    "href": "api/io.features_to_ome_zarr.html#parameters",
    "title": "io.features_to_ome_zarr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nfeature_table\npd.DataFrame\nDataframe with feature measurements generated by feature_table\nrequired\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired\n\n\ntable_name\nstr\nFolder name of the measured regionprobs features\n'regionprops'\n\n\nlabel_name\nstr\nName of the labels to use for feature measurements\n'nuclei'"
  },
  {
    "objectID": "api/utils.alpha_to_numeric.html",
    "href": "api/utils.alpha_to_numeric.html",
    "title": "utils.alpha_to_numeric",
    "section": "",
    "text": "utils.alpha_to_numeric(alpha)\nReturn the position of a single character in the alphabet\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nstr\nSingle alphabet character\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nint\nInteger position in the alphabet"
  },
  {
    "objectID": "api/utils.alpha_to_numeric.html#parameters",
    "href": "api/utils.alpha_to_numeric.html#parameters",
    "title": "utils.alpha_to_numeric",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nalpha\nstr\nSingle alphabet character\nrequired"
  },
  {
    "objectID": "api/utils.alpha_to_numeric.html#returns",
    "href": "api/utils.alpha_to_numeric.html#returns",
    "title": "utils.alpha_to_numeric",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nint\nInteger position in the alphabet"
  },
  {
    "objectID": "api/tasks.harmony_to_ome_zarr.html",
    "href": "api/tasks.harmony_to_ome_zarr.html",
    "title": "tasks.harmony_to_ome_zarr",
    "section": "",
    "text": "tasks.harmony_to_ome_zarr\n\n\n\n\n\nName\nDescription\n\n\n\n\nharmony_to_ome_zarr\nConvert TIFFs which were exported from Harmony (Operetta/Opera, Perkin-Elmer) to OME-ZARR\n\n\n\n\n\ntasks.harmony_to_ome_zarr.harmony_to_ome_zarr(zarr_urls, zarr_dir, img_paths, omero_channels, overwrite=False, coarsening_xy=2, compute=True)\nConvert TIFFs which were exported from Harmony (Operetta/Opera, Perkin-Elmer) to OME-ZARR\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_urls\nlist[str]\nList of zarr urls to be processed (not used by converter task)\nrequired\n\n\nzarr_dir\nstr\nPath to the new OME-ZARR output directory where the zarr plates should be saved. The zarr plates are extracted from the image paths\nrequired\n\n\nimg_paths\nlist[str]\nPaths to the input directories with the image files\nrequired\n\n\nomero_channels\nlist[OmeroNgffChannel]\nList of Omero channels\nrequired\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR directory\nFalse\n\n\ncoarsening_xy\nint\nCoarsening factor in XY to use for downsampling when building the pyramids\n2\n\n\ncompute\nbool\nWether to compute a numpy array from the dask array while saving the image to the zarr fileset (compute = TRUE is faster given that images fit into memory)\nTrue"
  },
  {
    "objectID": "api/tasks.harmony_to_ome_zarr.html#functions",
    "href": "api/tasks.harmony_to_ome_zarr.html#functions",
    "title": "tasks.harmony_to_ome_zarr",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nharmony_to_ome_zarr\nConvert TIFFs which were exported from Harmony (Operetta/Opera, Perkin-Elmer) to OME-ZARR\n\n\n\n\n\ntasks.harmony_to_ome_zarr.harmony_to_ome_zarr(zarr_urls, zarr_dir, img_paths, omero_channels, overwrite=False, coarsening_xy=2, compute=True)\nConvert TIFFs which were exported from Harmony (Operetta/Opera, Perkin-Elmer) to OME-ZARR\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_urls\nlist[str]\nList of zarr urls to be processed (not used by converter task)\nrequired\n\n\nzarr_dir\nstr\nPath to the new OME-ZARR output directory where the zarr plates should be saved. The zarr plates are extracted from the image paths\nrequired\n\n\nimg_paths\nlist[str]\nPaths to the input directories with the image files\nrequired\n\n\nomero_channels\nlist[OmeroNgffChannel]\nList of Omero channels\nrequired\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR directory\nFalse\n\n\ncoarsening_xy\nint\nCoarsening factor in XY to use for downsampling when building the pyramids\n2\n\n\ncompute\nbool\nWether to compute a numpy array from the dask array while saving the image to the zarr fileset (compute = TRUE is faster given that images fit into memory)\nTrue"
  },
  {
    "objectID": "api/io.labels_to_ome_zarr.html",
    "href": "api/io.labels_to_ome_zarr.html",
    "title": "io.labels_to_ome_zarr",
    "section": "",
    "text": "io.labels_to_ome_zarr(labels, zarr_url, name='nuclei')\nSave labels to the OME-ZARR fileset\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabels\nUnion[np.ndarray, da.Array]\nLabels array\nrequired\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired\n\n\nname\nstr\nName of the labels folder\n'nuclei'"
  },
  {
    "objectID": "api/io.labels_to_ome_zarr.html#parameters",
    "href": "api/io.labels_to_ome_zarr.html#parameters",
    "title": "io.labels_to_ome_zarr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nlabels\nUnion[np.ndarray, da.Array]\nLabels array\nrequired\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired\n\n\nname\nstr\nName of the labels folder\n'nuclei'"
  },
  {
    "objectID": "api/utils.colorbrewer.html",
    "href": "api/utils.colorbrewer.html",
    "title": "utils.colorbrewer",
    "section": "",
    "text": "utils.colorbrewer(name)\nGet all colors from a colormap in matplotlib\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nName of the colormap\nrequired"
  },
  {
    "objectID": "api/utils.colorbrewer.html#parameters",
    "href": "api/utils.colorbrewer.html#parameters",
    "title": "utils.colorbrewer",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nName of the colormap\nrequired"
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "API",
    "section": "",
    "text": "Modular processing tasks for the Opera/Operetta microscope and drug response profiling\n\n\n\ntasks.harmony_to_ome_zarr\n\n\n\ntasks.stardist_segmentation\n\n\n\ntasks.regionprops_measurement\n\n\n\ntasks.label_prediction\n\n\n\ntasks.condition_registration\n\n\n\n\n\n\n\nOME-ZARR reader and writer functions\n\n\n\nio.OmeZarrUrl\nPydantic model for a ZarrUrl\n\n\nio.read_ome_zarr\nRead an OME-ZARR fileset\n\n\nio.parse_zarr_url\nParse the OME-ZARR URL into a dictionary with the root URL, row, column and image\n\n\nio.convert_ROI_table_to_indices\nConvert physical units in region-of-interest tables (ROI) to indices based on the given scale level.\n\n\nio.get_roi\nGet the zarr path and pixel indices for the selected well at a given resolution level\n\n\nio.load_intensity_roi\nLoad the intensity array of the selected ROI\n\n\nio.load_label_roi\nLoad the label array of the selected ROI\n\n\nio.labels_to_ome_zarr\nSave labels to the OME-ZARR fileset\n\n\nio.features_to_ome_zarr\nSave features to the OME-ZARR fileset\n\n\nio.condition_to_ome_zarr\nSave experimental conditions (drug, concentration, etc.) to the OME-ZARR fileset\n\n\n\n\n\n\nUtility functions\n\n\n\nutils.colorbrewer\nGet all colors from a colormap in matplotlib\n\n\nutils.alpha_to_numeric\nReturn the position of a single character in the alphabet\n\n\nutils.numeric_to_alpha\nReturn the upper or lowercase character for a given position in the alphabet"
  },
  {
    "objectID": "api/index.html#fractal-tasks",
    "href": "api/index.html#fractal-tasks",
    "title": "API",
    "section": "",
    "text": "Modular processing tasks for the Opera/Operetta microscope and drug response profiling\n\n\n\ntasks.harmony_to_ome_zarr\n\n\n\ntasks.stardist_segmentation\n\n\n\ntasks.regionprops_measurement\n\n\n\ntasks.label_prediction\n\n\n\ntasks.condition_registration"
  },
  {
    "objectID": "api/index.html#inputoutput",
    "href": "api/index.html#inputoutput",
    "title": "API",
    "section": "",
    "text": "OME-ZARR reader and writer functions\n\n\n\nio.OmeZarrUrl\nPydantic model for a ZarrUrl\n\n\nio.read_ome_zarr\nRead an OME-ZARR fileset\n\n\nio.parse_zarr_url\nParse the OME-ZARR URL into a dictionary with the root URL, row, column and image\n\n\nio.convert_ROI_table_to_indices\nConvert physical units in region-of-interest tables (ROI) to indices based on the given scale level.\n\n\nio.get_roi\nGet the zarr path and pixel indices for the selected well at a given resolution level\n\n\nio.load_intensity_roi\nLoad the intensity array of the selected ROI\n\n\nio.load_label_roi\nLoad the label array of the selected ROI\n\n\nio.labels_to_ome_zarr\nSave labels to the OME-ZARR fileset\n\n\nio.features_to_ome_zarr\nSave features to the OME-ZARR fileset\n\n\nio.condition_to_ome_zarr\nSave experimental conditions (drug, concentration, etc.) to the OME-ZARR fileset"
  },
  {
    "objectID": "api/index.html#utils",
    "href": "api/index.html#utils",
    "title": "API",
    "section": "",
    "text": "Utility functions\n\n\n\nutils.colorbrewer\nGet all colors from a colormap in matplotlib\n\n\nutils.alpha_to_numeric\nReturn the position of a single character in the alphabet\n\n\nutils.numeric_to_alpha\nReturn the upper or lowercase character for a given position in the alphabet"
  },
  {
    "objectID": "api/tasks.label_prediction.html",
    "href": "api/tasks.label_prediction.html",
    "title": "tasks.label_prediction",
    "section": "",
    "text": "tasks.label_prediction\n\n\n\n\n\nName\nDescription\n\n\n\n\nlabel_prediction\nMake predictions on the selected wells and write them to the OME-ZARR\n\n\n\n\n\ntasks.label_prediction.label_prediction(zarr_url, classifier_path, table_name='regionprops', label_name='nuclei')\nMake predictions on the selected wells and write them to the OME-ZARR\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR Image\nrequired\n\n\nclassifier_path\nstr\nPath to the pickled scikit-learn classifier\nrequired\n\n\ntable_name\nstr\nFolder name of the measured regionprobs features\n'regionprops'\n\n\nlabel_name\nstr\nName of the labels to use for feature measurements\n'nuclei'"
  },
  {
    "objectID": "api/tasks.label_prediction.html#functions",
    "href": "api/tasks.label_prediction.html#functions",
    "title": "tasks.label_prediction",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nlabel_prediction\nMake predictions on the selected wells and write them to the OME-ZARR\n\n\n\n\n\ntasks.label_prediction.label_prediction(zarr_url, classifier_path, table_name='regionprops', label_name='nuclei')\nMake predictions on the selected wells and write them to the OME-ZARR\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR Image\nrequired\n\n\nclassifier_path\nstr\nPath to the pickled scikit-learn classifier\nrequired\n\n\ntable_name\nstr\nFolder name of the measured regionprobs features\n'regionprops'\n\n\nlabel_name\nstr\nName of the labels to use for feature measurements\n'nuclei'"
  },
  {
    "objectID": "api/tasks.regionprops_measurement.html",
    "href": "api/tasks.regionprops_measurement.html",
    "title": "tasks.regionprops_measurement",
    "section": "",
    "text": "tasks.regionprops_measurement\n\n\n\n\n\nName\nDescription\n\n\n\n\nfeature_table\nGenerate a regionprobs feature table\n\n\nregionprops_measurement\nTake measurements using regionprobs and write the features to the OME-ZARR\n\n\n\n\n\ntasks.regionprops_measurement.feature_table(labels, img, properties=['label', 'area', 'intensity_mean', 'intensity_max', 'intensity_min', 'eccentricity', 'perimeter', 'centroid', 'solidity'])\nGenerate a regionprobs feature table\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabels\nnp.ndarray\nA labels array\nrequired\n\n\nimg\nnp.ndarray\nAn intensity array\nrequired\n\n\nproperties\nlist[str]\nA list of regionprops properties\n['label', 'area', 'intensity_mean', 'intensity_max', 'intensity_min', 'eccentricity', 'perimeter', 'centroid', 'solidity']\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npd.DataFrame\nA feature dataframe including a column with the label index\n\n\n\n\n\n\n\ntasks.regionprops_measurement.regionprops_measurement(zarr_url, table_name='regionprops', label_name='nuclei', level=0, overwrite=False)\nTake measurements using regionprobs and write the features to the OME-ZARR\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR Image\nrequired\n\n\ntable_name\nstr\nFolder name of the measured regionprobs features\n'regionprops'\n\n\nlabel_name\nstr\nName of the labels to use for feature measurements\n'nuclei'\n\n\nlevel\nint\nResolution level (0 = full resolution)\n0\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR feature table\nFalse"
  },
  {
    "objectID": "api/tasks.regionprops_measurement.html#functions",
    "href": "api/tasks.regionprops_measurement.html#functions",
    "title": "tasks.regionprops_measurement",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfeature_table\nGenerate a regionprobs feature table\n\n\nregionprops_measurement\nTake measurements using regionprobs and write the features to the OME-ZARR\n\n\n\n\n\ntasks.regionprops_measurement.feature_table(labels, img, properties=['label', 'area', 'intensity_mean', 'intensity_max', 'intensity_min', 'eccentricity', 'perimeter', 'centroid', 'solidity'])\nGenerate a regionprobs feature table\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabels\nnp.ndarray\nA labels array\nrequired\n\n\nimg\nnp.ndarray\nAn intensity array\nrequired\n\n\nproperties\nlist[str]\nA list of regionprops properties\n['label', 'area', 'intensity_mean', 'intensity_max', 'intensity_min', 'eccentricity', 'perimeter', 'centroid', 'solidity']\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npd.DataFrame\nA feature dataframe including a column with the label index\n\n\n\n\n\n\n\ntasks.regionprops_measurement.regionprops_measurement(zarr_url, table_name='regionprops', label_name='nuclei', level=0, overwrite=False)\nTake measurements using regionprobs and write the features to the OME-ZARR\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR Image\nrequired\n\n\ntable_name\nstr\nFolder name of the measured regionprobs features\n'regionprops'\n\n\nlabel_name\nstr\nName of the labels to use for feature measurements\n'nuclei'\n\n\nlevel\nint\nResolution level (0 = full resolution)\n0\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR feature table\nFalse"
  },
  {
    "objectID": "api/tasks.harmony_to_ome_zarr.harmony_to_ome_zarr.html",
    "href": "api/tasks.harmony_to_ome_zarr.harmony_to_ome_zarr.html",
    "title": "tasks.harmony_to_ome_zarr.harmony_to_ome_zarr",
    "section": "",
    "text": "tasks.harmony_to_ome_zarr.harmony_to_ome_zarr(zarr_urls, zarr_dir, img_path, overwrite=False, coarsening_xy=2, compute=True)\nConvert TIFFs which were exported from Harmony (Operetta/Opera, Perkin-Elmer) to OME-ZARR\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_urls\nlist[str]\nList of zarr urls to be processed (not used by converter task)\nrequired\n\n\nzarr_dir\nstr\nPath to the new OME-ZARR output directory\nrequired\n\n\nimg_path\nstr\nPath to the input directory with the image files\nrequired\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR directory\nFalse\n\n\ncoarsening_xy\nint\nCoarsening factor in XY to use for downsampling when building the pyramids\n2\n\n\ncompute\nbool\nWether to compute a numpy array from the dask array while saving the image to the zarr fileset (compute = TRUE is faster given that images fit into memory)\nTrue"
  },
  {
    "objectID": "api/tasks.harmony_to_ome_zarr.harmony_to_ome_zarr.html#parameters",
    "href": "api/tasks.harmony_to_ome_zarr.harmony_to_ome_zarr.html#parameters",
    "title": "tasks.harmony_to_ome_zarr.harmony_to_ome_zarr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nzarr_urls\nlist[str]\nList of zarr urls to be processed (not used by converter task)\nrequired\n\n\nzarr_dir\nstr\nPath to the new OME-ZARR output directory\nrequired\n\n\nimg_path\nstr\nPath to the input directory with the image files\nrequired\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR directory\nFalse\n\n\ncoarsening_xy\nint\nCoarsening factor in XY to use for downsampling when building the pyramids\n2\n\n\ncompute\nbool\nWether to compute a numpy array from the dask array while saving the image to the zarr fileset (compute = TRUE is faster given that images fit into memory)\nTrue"
  },
  {
    "objectID": "api/io.load_label_roi.html",
    "href": "api/io.load_label_roi.html",
    "title": "io.load_label_roi",
    "section": "",
    "text": "io.load_label_roi(roi_url, roi_idx, roi=0, name='nuclei', channel=0, timepoint=0)\nLoad the label array of the selected ROI\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nroi_url\nPath\nzarr url to the selected ROI\nrequired\n\n\nroi_idx\npd.DataFrame\nDataframe with the x/y/z start and end indices\nrequired\n\n\nroi\nint\nROI index in the selected well\n0\n\n\nname\nstr\nName of the labels folder\n'nuclei'\n\n\nchannel\nint\nChannel index\n0\n\n\ntimepoint\nint\nTimepoint index\n0\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnp.ndarray\nNumpy array with the ROI labels"
  },
  {
    "objectID": "api/io.load_label_roi.html#parameters",
    "href": "api/io.load_label_roi.html#parameters",
    "title": "io.load_label_roi",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nroi_url\nPath\nzarr url to the selected ROI\nrequired\n\n\nroi_idx\npd.DataFrame\nDataframe with the x/y/z start and end indices\nrequired\n\n\nroi\nint\nROI index in the selected well\n0\n\n\nname\nstr\nName of the labels folder\n'nuclei'\n\n\nchannel\nint\nChannel index\n0\n\n\ntimepoint\nint\nTimepoint index\n0"
  },
  {
    "objectID": "api/io.load_label_roi.html#returns",
    "href": "api/io.load_label_roi.html#returns",
    "title": "io.load_label_roi",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nnp.ndarray\nNumpy array with the ROI labels"
  },
  {
    "objectID": "api/tasks.condition_registration.html",
    "href": "api/tasks.condition_registration.html",
    "title": "tasks.condition_registration",
    "section": "",
    "text": "tasks.condition_registration\n\n\n\n\n\nName\nDescription\n\n\n\n\ncondition_registration\nRegister the experimental (drug layout) in the OME-ZARR.\n\n\n\n\n\ntasks.condition_registration.condition_registration(zarr_url, layout_path, condition_name='condition', overwrite=False)\nRegister the experimental (drug layout) in the OME-ZARR. The table should contain at least the columns row and col identifying the well. It can have an arbitrary number of additional metadata columns (e.g.Â drug, concentration, medium, sample). Drug combinations can be specified by two entries pointing to the same row / col\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR Image\nrequired\n\n\nlayout_path\nstr\nPath to a drug layout file (.csv) with at least the columns: row, col\nrequired\n\n\ncondition_name\nstr\nName of the condition table\n'condition'\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR condition table\nFalse"
  },
  {
    "objectID": "api/tasks.condition_registration.html#functions",
    "href": "api/tasks.condition_registration.html#functions",
    "title": "tasks.condition_registration",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncondition_registration\nRegister the experimental (drug layout) in the OME-ZARR.\n\n\n\n\n\ntasks.condition_registration.condition_registration(zarr_url, layout_path, condition_name='condition', overwrite=False)\nRegister the experimental (drug layout) in the OME-ZARR. The table should contain at least the columns row and col identifying the well. It can have an arbitrary number of additional metadata columns (e.g.Â drug, concentration, medium, sample). Drug combinations can be specified by two entries pointing to the same row / col\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR Image\nrequired\n\n\nlayout_path\nstr\nPath to a drug layout file (.csv) with at least the columns: row, col\nrequired\n\n\ncondition_name\nstr\nName of the condition table\n'condition'\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR condition table\nFalse"
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Contributing",
    "section": "",
    "text": "Package development and installation in Fractal\n\nInstall the package in dev mode with python -m pip install -e \".[dev]\"\nDevelop the function according to the Fractal API\nUpdate the image list and the Fractal manifest with python src/operetta_compose/dev/create_manifest.py\nBuild a wheel file in the dist folder of the package with python -m build\nCollect the tasks on a Fractal server\n\n\n\n\n\n\n\nNote\n\n\n\nAs Fractal task are Python function they can also be execute independently of Fractal e.g.Â by running\n\nfrom operetta_compose.tasks.harmony_to_ome_zarr import harmony_to_ome_zarr\n\nharmony_to_ome_zarr(\n  img_path=\"operetta_plate/Images\",\n  zarr_dir=\"operetta_plate.zarr\"\n)"
  },
  {
    "objectID": "napari.html",
    "href": "napari.html",
    "title": "View OME-ZARR plates in Napari",
    "section": "",
    "text": "This tutorial demonstrates how to load data generated with Fractal into Napari using operetta-compose and the ome-zarr-navigator\nimport operetta_compose as oc\nimport napari\nimport napari_ome_zarr_navigator\nfrom pathlib import Path\ndef add_well(zarr_root: str, row: str, col: str, viewer: napari.viewer.Viewer):\n    \"\"\"Add a well with labels to the napari viewer\n\n    Args:\n        zarr_root: the base URL of the OME-ZARR\n        row: the row of the plate to load\n        col: the column of the plate to load\n        viewer: an instance of a napari Viewer\n    \"\"\"\n    zarr_url = str(Path(f\"{zarr_root}/{row}/{col}/0\").resolve())\n    roi_url, roi_idx = oc.io.get_roi(zarr_url, \"well_ROI_table\", level=0)\n    img = oc.io.load_intensity_roi(roi_url, roi_idx)\n    labels = oc.io.load_label_roi(roi_url, roi_idx)\n\n    viewer.add_image(img, name=f\"{row}{col}\")\n    label_layer = viewer.add_labels(labels, name=f\"{row}{col}_label\")\n    napari_ome_zarr_navigator.util.add_features_to_labels(zarr_url, label_layer)\nStart a Napari Viewer and load a predefined well from the OME-Zarr\nviewer = napari.Viewer()\nrow = \"C\"\ncol = \"3\"\nzarr_root = \"../../operetta-compose/tests/test_output/operetta_plate.zarr\"\nadd_well(zarr_root, row, col, viewer)"
  },
  {
    "objectID": "napari.html#utilities",
    "href": "napari.html#utilities",
    "title": "View OME-ZARR plates in Napari",
    "section": "Utilities",
    "text": "Utilities\n\nInspect the classifier\n\nimport pickle\nwith open(\"../../operetta-compose/tests/classifier.pkl\", \"rb\") as clf_file:\n    classifier = pickle.load(clf_file)\n\n\n\nInspect predictions in the regionprops table\n\nimport anndata as ad\nad.read_zarr(f\"{zarr_root}/{row}/{col}/0/tables/regionprops\").obs\n\n\n\n\n\n\n\n\nroi_id\nlabel\nprediction\n\n\n\n\n0\nC3\n1\n2\n\n\n1\nC3\n2\n2\n\n\n2\nC3\n3\n1\n\n\n3\nC3\n4\n2\n\n\n4\nC3\n5\n1\n\n\n...\n...\n...\n...\n\n\n3630\nC3\n3631\n1\n\n\n3631\nC3\n3632\n2\n\n\n3632\nC3\n3633\n2\n\n\n3633\nC3\n3634\n1\n\n\n3634\nC3\n3635\n1\n\n\n\n\n3635 rows Ã 3 columns"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "Standalone installation\nInstall the latest version of operetta-compose from PyPI:\n\npip install operetta-compose\n\n\n\nFractal installation\nFrom a Fractal server collect the package from PyPI with operetta-compose and indicate the desired version number."
  },
  {
    "objectID": "api/io.parse_zarr_url.html",
    "href": "api/io.parse_zarr_url.html",
    "title": "io.parse_zarr_url",
    "section": "",
    "text": "io.parse_zarr_url(zarr_url)\nParse the OME-ZARR URL into a dictionary with the root URL, row, column and image\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nOmeZarrUrl\nA OmeZarrUrl object"
  },
  {
    "objectID": "api/io.parse_zarr_url.html#parameters",
    "href": "api/io.parse_zarr_url.html#parameters",
    "title": "io.parse_zarr_url",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired"
  },
  {
    "objectID": "api/io.parse_zarr_url.html#returns",
    "href": "api/io.parse_zarr_url.html#returns",
    "title": "io.parse_zarr_url",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nOmeZarrUrl\nA OmeZarrUrl object"
  },
  {
    "objectID": "api/io.convert_ROI_table_to_indices.html",
    "href": "api/io.convert_ROI_table_to_indices.html",
    "title": "io.convert_ROI_table_to_indices",
    "section": "",
    "text": "io.convert_ROI_table_to_indices(ROI, pxl_sizes_zyx, cols_xyz_pos=['x_micrometer', 'y_micrometer', 'z_micrometer'], cols_xyz_len=['len_x_micrometer', 'len_y_micrometer', 'len_z_micrometer'])\nConvert physical units in region-of-interest tables (ROI) to indices based on the given scale level.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nROI\n\nName of the region of interest\nrequired\n\n\npxl_sizes_zyx\n\nPhysical size of the zyx pixels in units given defined in multiscales (usually um)\nrequired\n\n\ncols_xyz_pos\n\nName of columns identifying the xyz positions\n['x_micrometer', 'y_micrometer', 'z_micrometer']\n\n\ncols_xyz_len\n\nName of columns identifying the physical dimensions in xyz\n['len_x_micrometer', 'len_y_micrometer', 'len_z_micrometer']\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ndict[str, int]\nA dictionary with FOV names as keys and a list of starting and end pixel indices as [s_z, e_z, s_y, e_y, s_x, e_x].\n\n\n\n\n\n\n&gt;&gt;&gt; ROI_table = ad.read_zarr(\"plate.zarr/C/3/0/tables/FOV_ROI_table/\")\n&gt;&gt;&gt; operetta_compose.io.convert_ROI_table_to_indices(ROI_table, [1.0, 1.195, 1.195])"
  },
  {
    "objectID": "api/io.convert_ROI_table_to_indices.html#parameters",
    "href": "api/io.convert_ROI_table_to_indices.html#parameters",
    "title": "io.convert_ROI_table_to_indices",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nROI\n\nName of the region of interest\nrequired\n\n\npxl_sizes_zyx\n\nPhysical size of the zyx pixels in units given defined in multiscales (usually um)\nrequired\n\n\ncols_xyz_pos\n\nName of columns identifying the xyz positions\n['x_micrometer', 'y_micrometer', 'z_micrometer']\n\n\ncols_xyz_len\n\nName of columns identifying the physical dimensions in xyz\n['len_x_micrometer', 'len_y_micrometer', 'len_z_micrometer']"
  },
  {
    "objectID": "api/io.convert_ROI_table_to_indices.html#returns",
    "href": "api/io.convert_ROI_table_to_indices.html#returns",
    "title": "io.convert_ROI_table_to_indices",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ndict[str, int]\nA dictionary with FOV names as keys and a list of starting and end pixel indices as [s_z, e_z, s_y, e_y, s_x, e_x]."
  },
  {
    "objectID": "api/io.convert_ROI_table_to_indices.html#examples",
    "href": "api/io.convert_ROI_table_to_indices.html#examples",
    "title": "io.convert_ROI_table_to_indices",
    "section": "",
    "text": "&gt;&gt;&gt; ROI_table = ad.read_zarr(\"plate.zarr/C/3/0/tables/FOV_ROI_table/\")\n&gt;&gt;&gt; operetta_compose.io.convert_ROI_table_to_indices(ROI_table, [1.0, 1.195, 1.195])"
  },
  {
    "objectID": "api/io.OmeZarrUrl.html",
    "href": "api/io.OmeZarrUrl.html",
    "title": "io.OmeZarrUrl",
    "section": "",
    "text": "io.OmeZarrUrl()\nPydantic model for a ZarrUrl\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nroot\nstr\nRoot path of the OME-ZARR\n\n\nrow\nOptional[str]\nRow of the multiwell plate\n\n\ncol\nOptional[str]\nColumn of the multiwell plate\n\n\nwell\nOptional[str]\nWell as \n\n\nimage\nOptional[str]\nImage identifier in the OME-ZARR"
  },
  {
    "objectID": "api/io.OmeZarrUrl.html#attributes",
    "href": "api/io.OmeZarrUrl.html#attributes",
    "title": "io.OmeZarrUrl",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nroot\nstr\nRoot path of the OME-ZARR\n\n\nrow\nOptional[str]\nRow of the multiwell plate\n\n\ncol\nOptional[str]\nColumn of the multiwell plate\n\n\nwell\nOptional[str]\nWell as \n\n\nimage\nOptional[str]\nImage identifier in the OME-ZARR"
  },
  {
    "objectID": "api/utils.OmeZarrUrl.html",
    "href": "api/utils.OmeZarrUrl.html",
    "title": "utils.OmeZarrUrl",
    "section": "",
    "text": "utils.OmeZarrUrl\nutils.OmeZarrUrl()\nModel for a ZarrUrl"
  },
  {
    "objectID": "api/utils.numeric_to_alpha.html",
    "href": "api/utils.numeric_to_alpha.html",
    "title": "utils.numeric_to_alpha",
    "section": "",
    "text": "utils.numeric_to_alpha(numeric, upper=True)\nReturn the upper or lowercase character for a given position in the alphabet\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnumeric\nint\nInteger position in the alphabet\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstr\nSingle alphabet character"
  },
  {
    "objectID": "api/utils.numeric_to_alpha.html#parameters",
    "href": "api/utils.numeric_to_alpha.html#parameters",
    "title": "utils.numeric_to_alpha",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nnumeric\nint\nInteger position in the alphabet\nrequired"
  },
  {
    "objectID": "api/utils.numeric_to_alpha.html#returns",
    "href": "api/utils.numeric_to_alpha.html#returns",
    "title": "utils.numeric_to_alpha",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nstr\nSingle alphabet character"
  },
  {
    "objectID": "api/utils.parse_zarr_url.html",
    "href": "api/utils.parse_zarr_url.html",
    "title": "utils.parse_zarr_url",
    "section": "",
    "text": "utils.parse_zarr_url(zarr_url)\nParse the OME-ZARR URL into a dictionary with the root URL, row, column and image\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nOmeZarrUrl\nA OmeZarrUrl object"
  },
  {
    "objectID": "api/utils.parse_zarr_url.html#parameters",
    "href": "api/utils.parse_zarr_url.html#parameters",
    "title": "utils.parse_zarr_url",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired"
  },
  {
    "objectID": "api/utils.parse_zarr_url.html#returns",
    "href": "api/utils.parse_zarr_url.html#returns",
    "title": "utils.parse_zarr_url",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nOmeZarrUrl\nA OmeZarrUrl object"
  },
  {
    "objectID": "api/tasks.stardist_segmentation.html",
    "href": "api/tasks.stardist_segmentation.html",
    "title": "tasks.stardist_segmentation",
    "section": "",
    "text": "tasks.stardist_segmentation\n\n\n\n\n\nName\nDescription\n\n\n\n\nstardist_segmentation\nSegment cells with Stardist\n\n\n\n\n\ntasks.stardist_segmentation.stardist_segmentation(zarr_url, channel, roi_table='FOV_ROI_table', stardist_model='2D_versatile_fluo', label_name='nuclei', prob_thresh=None, nms_thresh=None, scale=1, level=0, overwrite=False)\nSegment cells with Stardist\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR Image\nrequired\n\n\nchannel\nChannelInputModel\nChannel for segmentation; requires either wavelength_id (e.g.Â A01_C01) or label (e.g.Â DAPI) but not both\nrequired\n\n\nroi_table\nstr\nName of the ROI table\n'FOV_ROI_table'\n\n\nstardist_model\nstr\nName of the Stardist model (â2D_versatile_fluoâ, â2D_versatile_heâ, â2D_demoâ, â3D_demoâ)\n'2D_versatile_fluo'\n\n\nlabel_name\nstr\nName of the labels folder\n'nuclei'\n\n\nprob_thresh\nOptional[float]\nprob_thresh: Only consider objects with predicted object probability above this threshold\nNone\n\n\nnms_thresh\nOptional[float]\nPerform non-maximum suppression (NMS) that considers two objects to be the same when their area/surface overlap exceeds this threshold\nNone\n\n\nscale\nint\nScale the input image internally by a factor and rescale the output accordingly.\n1\n\n\nlevel\nint\nResolution level (0 = full resolution)\n0\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR segmentations\nFalse"
  },
  {
    "objectID": "api/tasks.stardist_segmentation.html#functions",
    "href": "api/tasks.stardist_segmentation.html#functions",
    "title": "tasks.stardist_segmentation",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nstardist_segmentation\nSegment cells with Stardist\n\n\n\n\n\ntasks.stardist_segmentation.stardist_segmentation(zarr_url, channel, roi_table='FOV_ROI_table', stardist_model='2D_versatile_fluo', label_name='nuclei', prob_thresh=None, nms_thresh=None, scale=1, level=0, overwrite=False)\nSegment cells with Stardist\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR Image\nrequired\n\n\nchannel\nChannelInputModel\nChannel for segmentation; requires either wavelength_id (e.g.Â A01_C01) or label (e.g.Â DAPI) but not both\nrequired\n\n\nroi_table\nstr\nName of the ROI table\n'FOV_ROI_table'\n\n\nstardist_model\nstr\nName of the Stardist model (â2D_versatile_fluoâ, â2D_versatile_heâ, â2D_demoâ, â3D_demoâ)\n'2D_versatile_fluo'\n\n\nlabel_name\nstr\nName of the labels folder\n'nuclei'\n\n\nprob_thresh\nOptional[float]\nprob_thresh: Only consider objects with predicted object probability above this threshold\nNone\n\n\nnms_thresh\nOptional[float]\nPerform non-maximum suppression (NMS) that considers two objects to be the same when their area/surface overlap exceeds this threshold\nNone\n\n\nscale\nint\nScale the input image internally by a factor and rescale the output accordingly.\n1\n\n\nlevel\nint\nResolution level (0 = full resolution)\n0\n\n\noverwrite\nbool\nWhether to overwrite any existing OME-ZARR segmentations\nFalse"
  },
  {
    "objectID": "api/io.condition_to_ome_zarr.html",
    "href": "api/io.condition_to_ome_zarr.html",
    "title": "io.condition_to_ome_zarr",
    "section": "",
    "text": "io.condition_to_ome_zarr(zarr_url, condition_table, condition_name='condition')\nSave experimental conditions (drug, concentration, etc.) to the OME-ZARR fileset\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR\nrequired\n\n\ncondition_table\npd.DataFrame\nDataframe with experimental conditions\nrequired\n\n\ncondition_name\nstr\nFolder name of the experimental condition table\n'condition'"
  },
  {
    "objectID": "api/io.condition_to_ome_zarr.html#parameters",
    "href": "api/io.condition_to_ome_zarr.html#parameters",
    "title": "io.condition_to_ome_zarr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to an OME-ZARR\nrequired\n\n\ncondition_table\npd.DataFrame\nDataframe with experimental conditions\nrequired\n\n\ncondition_name\nstr\nFolder name of the experimental condition table\n'condition'"
  },
  {
    "objectID": "api/io.load_intensity_roi.html",
    "href": "api/io.load_intensity_roi.html",
    "title": "io.load_intensity_roi",
    "section": "",
    "text": "io.load_intensity_roi(roi_url, roi_idx, roi=0, channel=0, timepoint=0)\nLoad the intensity array of the selected ROI\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nroi_url\nPath\nzarr url to the selected ROI\nrequired\n\n\nroi_idx\npd.DataFrame\nDataframe with the x/yZ start and end indices\nrequired\n\n\nroi\nint\nIndex of the ROI in the selected well\n0\n\n\nchannel\nint\nChannel index\n0\n\n\ntimepoint\nint\nTimepoint index\n0\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnp.ndarray\nNumpy array with the ROI intensities"
  },
  {
    "objectID": "api/io.load_intensity_roi.html#parameters",
    "href": "api/io.load_intensity_roi.html#parameters",
    "title": "io.load_intensity_roi",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nroi_url\nPath\nzarr url to the selected ROI\nrequired\n\n\nroi_idx\npd.DataFrame\nDataframe with the x/yZ start and end indices\nrequired\n\n\nroi\nint\nIndex of the ROI in the selected well\n0\n\n\nchannel\nint\nChannel index\n0\n\n\ntimepoint\nint\nTimepoint index\n0"
  },
  {
    "objectID": "api/io.load_intensity_roi.html#returns",
    "href": "api/io.load_intensity_roi.html#returns",
    "title": "io.load_intensity_roi",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nnp.ndarray\nNumpy array with the ROI intensities"
  },
  {
    "objectID": "api/io.read_ome_zarr.html",
    "href": "api/io.read_ome_zarr.html",
    "title": "io.read_ome_zarr",
    "section": "",
    "text": "io.read_ome_zarr(zarr_url)\nRead an OME-ZARR fileset\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nUnion[str, Path]\nPath to an OME-ZARR\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nNode\nAn ome_zarr image node"
  },
  {
    "objectID": "api/io.read_ome_zarr.html#parameters",
    "href": "api/io.read_ome_zarr.html#parameters",
    "title": "io.read_ome_zarr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nUnion[str, Path]\nPath to an OME-ZARR\nrequired"
  },
  {
    "objectID": "api/io.read_ome_zarr.html#returns",
    "href": "api/io.read_ome_zarr.html#returns",
    "title": "io.read_ome_zarr",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nNode\nAn ome_zarr image node"
  },
  {
    "objectID": "api/io.get_roi.html",
    "href": "api/io.get_roi.html",
    "title": "io.get_roi",
    "section": "",
    "text": "io.get_roi(zarr_url, roi_table, level=0)\nGet the zarr path and pixel indices for the selected well at a given resolution level\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired\n\n\nroi_table\nstr\nName of the ROI table\nrequired\n\n\nlevel\nint\nResolution level (0 = original, not downsampled resolution level)\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntuple[Path, pd.DataFrame]\nTuple of zarr url and dataframe with start and end pixel indices (s_z, e_z, s_y, e_y, s_x, e_x)"
  },
  {
    "objectID": "api/io.get_roi.html#parameters",
    "href": "api/io.get_roi.html#parameters",
    "title": "io.get_roi",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nzarr_url\nstr\nPath to the OME-ZARR\nrequired\n\n\nroi_table\nstr\nName of the ROI table\nrequired\n\n\nlevel\nint\nResolution level (0 = original, not downsampled resolution level)\n0"
  },
  {
    "objectID": "api/io.get_roi.html#returns",
    "href": "api/io.get_roi.html#returns",
    "title": "io.get_roi",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntuple[Path, pd.DataFrame]\nTuple of zarr url and dataframe with start and end pixel indices (s_z, e_z, s_y, e_y, s_x, e_x)"
  },
  {
    "objectID": "vizarr.html",
    "href": "vizarr.html",
    "title": "View OME-ZARR plates in Vizarr",
    "section": "",
    "text": "This tutorial demonstrates how to load data generated with Fractal into Vizarr.\n\nimport zarr\nimport vizarr\nimport fsspec\nimport requests\nimport zipfile\nimport io\nfrom pathlib import Path\nfrom typing import Optional\n\ndef zarr_from_zip(zarr_root: str, row: Optional[str]=None, col: Optional[str]=None):\n    with requests.get(zarr_root, stream=True) as r:\n        r.raise_for_status()\n        with zipfile.ZipFile(io.BytesIO(r.content)) as z:\n            z.extractall()\n            stem = Path(zarr_root).stem\n            if (row is not None) & (col is not None):\n                zarr_url = f\"{stem}/{row}/{col}\"\n            else:\n                zarr_url = stem\n            store = fsspec.get_mapper(zarr_url)\n            root = zarr.open(store, mode='r')\n            return(root)\n\n\nzip_url = \"https://zenodo.org/records/13998404/files/operetta_plate.zarr.zip\"\nzarr_plate = zarr_from_zip(zip_url, \"C\", \"3\")\n\n\nviewer = vizarr.Viewer()\nviewer.add_image(source=zarr_plate)\nviewer"
  }
]